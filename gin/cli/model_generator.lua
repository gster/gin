--[[
    add a model to the application.
]]
local ansicolors = require 'ansicolors'

local model_generator = {}
local model_content = [[
-- generated by gin
local MySql = require 'db.mysql'
local SqlOrm = require 'gin.db.sql.orm'
    
-- define
return SqlOrm.define_model(MySql, '{{MNAME}}')
]]
local controller_content = [[
-- generated by gin
local {{CNAME}}Controller = {}
local {{CNAME}} = require 'app.models.{{MNAME}}}}'
function {{CNAME}}Controller:index()
    local {{MNAME}} = {{CNAME}}.where(
        { is_delete = 0 }
        -- ,{limit = 5, offset = 10,order = "** DESC" }
    )
    return 200, {{MNAME}}
end
fuction {{CNAME}}Controller:show()
    local {{item}} = {{CNAME}}.find_by(self.params.id)
    if {{item}} == nil then
        return 404, {code=1,msg = "object not found"}
    end
    return 200, {{item}}
end
function {{CNAME}}Controller:filter()
    local {{MNAME}} = {{CNAME}}.where(self.request.body)
    return 200, {{MNAME}}
end
function {{CNAME}}Controller:create()
    local new_{{item}} = {{CNAME}}.create(self.request.body)
    return 201, new_{{item}}
end
function {{CNAME}}Controller:update()
    local {{item}} = {{CNAME}}.find_by(self.params.id)
    if {{item}} == nil then
        return 404, {code=1,msg = "object not found"}
    end
    {{item}}:update(self.request.body)
    {{item}}:save()
    return 200, {{item}}
end
function {{CNAME}}Controller:delete()
    local {{item}} = {{CNAME}}.find_by(self.params.id)
    if {{item}} == nil then
        return 404, {code=1,msg = "object not found"}
    end
    {{item}}:update({is_delete = 1})
    {{item}}:save()
    return 200, {{item}}
end
return {{CNAME}}Controller
]]
local controller_spec_content = [[
-- generated by gin
local MySql = require 'db.mysql'
local Users = require 'app.models.{{MNAME}}'

local function clean_db()
    MySql:execute("TRUNCATE TABLE {{MNAME}};")
end

describe("{{CNAME}}Controller", function()
    before_each(function()
        clean_db()
    end)
    after_each(function()
        clean_db()
    end)
    describe("#index", function()
        before_each(function()
            item1 = {{CNAME}}.create({
               -- sth like: first_name = 'roberto', last_name = 'gin'
            })
            item2 = {{CNAME}}.create({
                -- first_name = 'hedy', last_name = 'tonic'
            })
        end)

        after_each(function()
            item1 = nil
            item2 = nil
        end)
        it("shows the list of {{MNAME}}", function()
            local response = hit({
                method = 'GET',
                path = "/{{MNAME}}"
            })
            assert.are.same(200, response.status)
            assert.are.same({
                [1] = item1,
                [2] = item2
            }, response.body)
        end)
    end)
    describe("#show", function()
        before_each(function()
            item1 = {{CNAME}}.create({
                -- first_name = 'roberto', last_name = 'gin'
            })
            item2 = {{CNAME}}.create({
                -- first_name = 'hedy', last_name = 'tonic'
            })
        end)

        after_each(function()
            item1 = nil
            item2 = nil
        end)
        it("shows the {{MNAME}}", function()
            local response = hit({
                method = 'GET',
                path = "/{{MNAME}}/" .. item1.id
            })
            assert.are.same(200, response.status)
            assert.are.same(item1, response.body)
        end)
    end)
    describe("#filter", function()
        before_each(function()
            item1 = {{CNAME}}.create({
                -- first_name = 'roberto', last_name = 'gin'
            })
            item2 = {{CNAME}}.create({
                -- first_name = 'hedy', last_name = 'tonic'
            })
        end)

        after_each(function()
            item1 = nil
            item2 = nil
        end)
        it("shows the list of {{MNAME}}", function()
            local response = hit({
                method = 'POST',
                path = "/{{MNAME}}/filter",
                body = {
                    -- first_name = 'roberto'
                }
            })
            assert.are.same(200, response.status)
            assert.are.same({
                [1] = item1
            }, response.body)
        end)
    end)
    describe("#create", function()
        it("creates a item", function()
            local response = hit({
                method = 'POST',
                path = "/{{MNAME}}",
                body = {
                    -- first_name = 'roberto', last_name = 'gin'
                }
            })
            local new_item = {{CNAME}}.find_by({ 
               -- first_name = 'roberto', last_name = 'gin' 
            })
            assert.are_not.equals(nil, new_item)
            assert.are.same(201, response.status)
            assert.are.same(new_item, response.body)
        end)
    end)
end)
]]
local route_content = [[
-- model {{CNAME}}' routes generated by gin
v{{ver}}:GET("/api/{{MNAME}}", { controller = "{{MNAME}}", action = "index" })
v{{ver}}:GET("/api/{{MNAME}}/:id", { controller = "{{MNAME}}", action = "show" })
v{{ver}}:POST("/api/{{MNAME}}/filter", { controller = "{{MNAME}}", action = "filter" })
v{{ver}}:POST("/api/{{MNAME}}", { controller = "{{MNAME}}", action = "create" })
v{{ver}}:PUT("/api/{{MNAME}}/:id", { controller = "{{MNAME}}", action = "update" })
v{{ver}}:DELETE("/api/{{MNAME}}/:id", { controller = "{{MNAME}}", action = "delete" })
]]
function model_generator.new(name,ver)
    local cname = name:gsub("^%l", string.upper) -- capitalize first letter
    ver = ver or 1
    -- create model
    local file_path = "app/models/" .. name .. ".lua"
    local f_exist = io.open(file_path, "r")
    if  f_exist~= nil then
        print(ansicolors("%{red}exist%{reset} " .. file_path))
        io.close(f_exist)
        return
    end
    local file_content = string.gsub(model_content, "{{MNAME}}", name)
    local file = io.open(file_path, "w")
    if file == nil then
        print(ansicolors("%{red}can't open%{reset} " .. file_path))
        return
    end
    file:write(file_content)
    file:close()
    print(ansicolors("%{green}create%{reset} " .. file_path))
    -- create controller
    file_path = "app/controllers/" ..ver.."/".. name .. "_controller.lua"
    file_content = string.gsub(controller_content, "{{CNAME}}", cname)
    file_content = string.gsub(file_content, "{{MNAME}}", name)
    file_content = string.gsub(file_content, "{{item}}", name:sub(1, -2)) -- remove last s
    file = io.open(file_path, "w")
    if file == nil then
        print(ansicolors("%{red}can't open%{reset} " .. file_path))
        return
    end
    file:write(file_content)
    file:close()
    print(ansicolors("%{green}create%{reset} " .. file_path))
    -- create controller spec
    file_path = "spec/controllers/" ..ver.."/".. name .. "_controller_spec.lua"
    file_content = string.gsub(controller_spec_content, "{{CNAME}}", cname)
    file_content = string.gsub(file_content, "{{MNAME}}", name)
    file = io.open(file_path, "w")
    if file == nil then
        print(ansicolors("%{red}can't open%{reset} " .. file_path))
        return
    end
    file:write(file_content)
    file:close()
    print(ansicolors("%{green}create%{reset} " .. file_path))
    -- create route
    file_path = "config/routes.lua"
    file = io.open(file_path, "a")
    if file == nil then
        print(ansicolors("%{red}can't open%{reset} " .. file_path))
        return
    end
    file_content = string.gsub(route_content, "{{MNAME}}", name)
    file_content = string.gsub(file_content, "{{ver}}", ver)
    file:write(file_content)
    file:close()
    print(ansicolors("%{green}create%{reset} " .. file_path))
end
return model_generator